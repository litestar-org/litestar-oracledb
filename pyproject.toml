[project]
authors = [{ name = "Cody Fincher", email = "cody@litestar.dev" }]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python",
  "Topic :: Software Development",
  "Typing :: Typed",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Topic :: Database",
  "Topic :: Database :: Database Engines/Servers",
]
dependencies = ["litestar>=2.0.29", "oracledb > 2.1"]
description = "Oracle DB plugin for Litestar"
keywords = ["litestar", "oracle"]
license = { text = "MIT" }
name = "litestar-oracledb"
readme = "README.md"
requires-python = ">=3.8"
version = "0.1.3"

[project.urls]
Changelog = "https://litestar-org.github.io/litesatr-oracledb/latest/changelog"
Discord = "https://discord.gg/X3FJqy8d2j"
Documentation = "https://litestar-org.github.io/litesatr-oracledb/latest/"
Homepage = "https://litestar-org.github.io/litesatr-oracledb/latest/"
Issue = "https://github.com/litestar-org/litestar-oracledb/issues/"
Source = "https://github.com/litestar-org/litestar-oracledb"

######################
# Build & Versioning #
######################
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github", "/docs"]

[tool.hatch.metadata]
allow-direct-references = true

#####################
# Environment Setup #
#####################

# Default environment with production dependencies
[tool.hatch.envs.default]
installer = "uv"
python = "3.12"

[tool.hatch.envs.test]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  "pytest-databases[redis,oracle]",
]
template = "default"
type = "virtual"

[tool.hatch.envs.test.env-vars]
PYTHONPATH = ".:src/"
PYTHONUNBUFFERED = "1"
SOURCE_DATE_EPOCH = "1580601600"

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.test.scripts]
cov = "pytest --cov=pytest_databases --cov-report=xml"
debug = "cov --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb"
no-cov = "cov --no-cov"


[tool.hatch.envs.docs]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  "pytest-databases[redis,oracle]",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
python = "3.11"
template = "default"
type = "virtual"

[tool.hatch.envs.docs.env-vars]
PYTHONPATH = "."
PYTHONUNBUFFERED = "1"
SOURCE_DATE_EPOCH = "1580601600"

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -M html docs docs/_build/ -E -a -j auto --keep-going"
serve = "sphinx-autobuild docs docs/_build/ -j auto --watch pytest_databases --watch docs --watch tests --watch CONTRIBUTING.rst --port 8002 {args}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = ["build", "validate"]

[tool.hatch.envs.local]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  "pytest-databases[redis,oracle]",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
path = ".venv/"
python = "3.12"
template = "default"
type = "virtual"


# Lint environment
[tool.hatch.envs.lint]
extra-dependencies = [
  # tests
  "anyio",
  "coverage[toml]>=6.2",
  "pytest",
  "pytest-cov",
  "pytest-mock",
  "pytest-vcr",
  "pytest-sugar",
  "pytest-click",
  "pytest-xdist",
  "pytest-databases[redis,oracle]",
  # lint
  "mypy",
  "ruff",
  "pylint",
  "pre-commit",
  "types-click",
  "types-six",
  "types-decorator",
  "types-pyyaml",
  "types-docutils",
  "types-redis",
  # docs
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "litestar-sphinx-theme @ git+https://github.com/litestar-org/litestar-sphinx-theme.git",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "sphinx-design>=0.5.0",
  "sphinxcontrib-mermaid>=0.9.2",
  "auto-pytabs[sphinx]>=0.4.0",
]
python = "3.12"
template = "default"
type = "virtual"

[tool.hatch.envs.lint.scripts]
check = ["style", "typing"]
fix = [
  "typing",
  "ruff format {args:.}",
  "ruff check --fix {args:.}",
  "style",                      # feedback on what is not fixable
  "pre-commit run --all-files",
]
style = ["echo \"VERSION: `ruff --version`\"", "ruff check {args:.}", "ruff format --check {args:.}"]
typing = ["echo \"VERSION: `mypy --version`\"", "mypy --install-types --non-interactive {args}"]


#####################
# Tools             #
#####################


[tool.slotscheck]
strict-imports = false
[tool.codespell]
ignore-words-list = "alog"
skip = 'pdm.lock, package-lock.json'

[tool.pyright]
exclude = ["scripts", "docs"]
include = ["src/pytest_databases", "tests"]

[tool.pytest.ini_options]
addopts = "-ra"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
  "ignore::DeprecationWarning:google.*",
  "ignore::DeprecationWarning:passlib.*",
  "ignore::DeprecationWarning:aiosql.*",
  "ignore::DeprecationWarning:litestar.constants.*",
  "ignore::DeprecationWarning:litestar.utils.*",
]
testpaths = ["tests"]

[tool.coverage.run]
concurrency = ["multiprocessing"]
omit = ["*/tests/*"]
parallel = true

[tool.coverage.report]
exclude_lines = [
  'if TYPE_CHECKING:',
  'pragma: no cover',
  "if __name__ == .__main__.:",
  'def __repr__',
  'if self\.debug:',
  'if settings\.DEBUG',
  'raise AssertionError',
  'raise NotImplementedError',
  'if 0:',
  'class .*\bProtocol\):',
  '@(abc\.)?abstractmethod',
]
omit = ["*/tests/*"]
show_missing = true


[tool.black]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
include = '\.pyi?$'
line-length = 120

[tool.ruff]
line-length = 120
src = ["src/litestar_oracledb", "tests"]
target-version = "py38"

[tool.ruff.lint]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
fixable = ["ALL"]
ignore = [
  "A003",    # flake8-builtins - class attribute {name} is shadowing a python builtin
  "B010",    # flake8-bugbear - do not call setattr with a constant attribute value
  "D100",    # pydocstyle - missing docstring in public module
  "D101",    # pydocstyle - missing docstring in public class
  "D102",    # pydocstyle - missing docstring in public method
  "D103",    # pydocstyle - missing docstring in public function
  "D104",    # pydocstyle - missing docstring in public package
  "D105",    # pydocstyle - missing docstring in magic method
  "D106",    # pydocstyle - missing docstring in public nested class
  "D107",    # pydocstyle - missing docstring in __init__
  "D202",    # pydocstyle - no blank lines allowed after function docstring
  "D205",    # pydocstyle - 1 blank line required between summary line and description
  "D415",    # pydocstyle - first line should end with a period, question mark, or exclamation point
  "E501",    # pycodestyle line too long, handled by black
  "PLW2901", # pylint - for loop variable overwritten by assignment target
  "RUF012",  # Ruff-specific rule - annotated with classvar
  "ANN401",
  "ANN102",
  "ANN101",
  "FBT",
  "PLR0913", # too many arguments
  "PT",
  "TD",
  "ARG002",  # ignore for now; investigate
  "PERF203", # ignore for now; investigate
  'COM812',
  'ISC001',
]
select = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 16

[tool.ruff.lint.per-file-ignores]
"tests/**/*.*" = [
  "A",
  "ARG",
  "B",
  "BLE",
  "C901",
  "D",
  "DTZ",
  "EM",
  "FBT",
  "G",
  "N",
  "PGH",
  "PIE",
  "PLR",
  "PLW",
  "PTH",
  "RSE",
  "S",
  "S101",
  "SIM",
  "TCH",
  "TRY",
  "UP006",
  "SLF001",
]
[tool.ruff.lint.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.lint.isort]
known-first-party = ["litestar_oracledb", "tests"]

[tool.mypy]
disallow_any_generics = false
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = '''(?x)(
^build/
|^dist/
|^.venv/
)
'''
implicit_reexport = false
plugins = []
strict = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_untyped_decorators = false
module = ["tests.*"]


[tool.git-cliff.changelog]
body = """
{% if version %}\
    `Release [v{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }} <https://github.com/litestar-org/litestar-oracledb/releases/tag/v{{ version | trim_start_matches(pat="v") }}>`_
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    * `See All commits in v{{ version | trim_start_matches(pat="v") }} <https://github.com/litestar-org/litestar-oracledb/commits/v{{ version | trim_start_matches(pat="v") }}>`_
{% else %}\
    [unreleased]
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
{% endif %}\
{% if previous %}\
    {% if previous.commit_id %}
        `{{ previous.commit_id | truncate(length=7, end="") }} <https://github.com/litestar-org/litestar-oracledb/commit/{{ previous.commit_id }}>`_ ... \
            `{{ commit_id | truncate(length=7, end="") }} <https://github.com/litestar-org/litestar-oracledb/commit/{{ commit_id }}>`_ \
            | `See diff for {{ version | trim_start_matches(pat="v") }} <https://github.com/litestar-org/litestar-oracledb/compare/{{ previous.commit_id }}...{{ commit_id }}>`_
    {% endif %}\
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    {{ group | upper_first }}
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    {% for commit in commits %}
        * (`{{ commit.id | truncate(length=7, end="") }} <https://github.com/litestar-org/litestar-oracledb/commit/{{ commit.id }}>`_) {% if commit.breaking %}[**breaking**] {% endif %} - {{ commit.message | upper_first }} ({{ commit.author.name  }})\
          {% for footer in commit.footers -%}
            , {{ footer.token }}{{ footer.separator }}{{ footer.value }}\
          {% endfor %}\
    {% endfor %}
{% endfor %}\n
"""
footer = """
Litestar oracledb Changelog
"""
header = """
=========
Changelog
=========\n
All commits to this project will be documented in this file.\n
"""
trim = true

[tool.git-cliff.git]
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^doc", group = "Documentation" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^style", group = "Styling" },
  { message = "^test", group = "Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore", group = "Miscellaneous Tasks" },
  { body = ".*security", group = "Security" },
]
conventional_commits = true
filter_commits = false
filter_unconventional = true
ignore_tags = ""
protect_breaking_commits = false
skip_tags = "v0.1.0-beta.1"
sort_commits = "oldest"
split_commits = false
tag_pattern = "v[0-9]*"
topo_order = false
